{"version":3,"sources":["utils/randomCity.js","components/display/randomizer.js","components/display/button.js","components/display/nav.js","components/display/title.js","utils/dayDisplay.js","utils/weatherDescription.js","components/display/view.js","utils/api.js","utils/date.js","components/display/main.js","components/app/App.js","serviceWorker.js","index.js"],"names":["cityList","name","detail","getRandomCity","i","Math","floor","random","length","city","country","Randomizer","props","onChange","onClick","this","React","Component","Button","e","type","view","className","Nav","onViewChange","Title","toLowerCase","onRandom","days","localize","rawWeather","localTimeRaw","Date","now","timezone","toUTCString","localTime","substr","localDate","fiveDayOfTheWeek","x","describe","weather","descriptor","View","data","map","day","timestamp","getDay","dayOfTheWeek","description","id","time","getHours","around","toFixed","list","fiveDay","dates","dayInSeconds","substrDate","push","main","temp","getWeather","apiCall","fetch","then","response","json","_","require","convertTimeZone","forecast","cloneForecast","cloneDeep","localTimes","dt_txt","setSeconds","getSeconds","newForecast","reduceToThisDay","weatherAndTime","describeTimeOfDay","today","finalForecast","every","d","Main","setWeather","state","localizedWeather","rawForecast","setState","result","onRandomCity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8419f2f6.chunk.js","sourcesContent":["const cityList = [\n  {\n    name: 'Abidjan',\n    detail: 'Ivory Coast',\n  },\n  {\n    name: 'Abu Dhabi',\n    detail: 'United Arab Emirates',\n  },\n  {\n    name: 'Abuja',\n    detail: 'Nigeria',\n  },\n  {\n    name: 'Accra',\n    detail: 'Ghana',\n  },\n  {\n    name: 'Addis Ababa',\n    detail: 'Ethiopia',\n  },\n  {\n    name: 'Ahmedabad',\n    detail: 'India',\n  },\n  {\n    name: 'Ahvaz',\n    detail: 'Iran',\n  },\n  {\n    name: 'Alexandria',\n    detail: 'Egypt',\n  },\n  {\n    name: 'Algiers',\n    detail: 'Algeria',\n  },\n  {\n    name: 'Almaty',\n    detail: 'Kazakhstan',\n  },\n  {\n    name: 'Ankara',\n    detail: 'Turkey',\n  },\n  {\n    name: 'Astana',\n    detail: 'Kazakhstan',\n  },\n  {\n    name: 'Auckland',\n    detail: 'New Zealand',\n  },\n  {\n    name: 'Baghdad',\n    detail: 'Iraq',\n  },\n  {\n    name: 'Baku',\n    detail: 'Azerbaijan',\n  },\n  {\n    name: 'Bandung',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Bangkok',\n    detail: 'Thailand',\n  },\n  {\n    name: 'Barcelona',\n    detail: 'Spain',\n  },\n  {\n    name: 'Barranquilla',\n    detail: 'Colombia',\n  },\n  {\n    name: 'Basra',\n    detail: 'Iraq',\n  },\n  {\n    name: 'Beijing',\n    detail: 'China',\n  },\n  {\n    name: 'Belgrade',\n    detail: 'Serbia',\n  },\n  {\n    name: 'Belo Horizonte',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Bengaluru',\n    detail: 'India',\n  },\n  {\n    name: 'Berlin',\n    detail: 'Germany',\n  },\n  {\n    name: 'Bhopal',\n    detail: 'India',\n  },\n  {\n    name: 'Birmingham',\n    detail: 'United Kingdom',\n  },\n  {\n    name: 'Bogotá',\n    detail: 'Colombia',\n  },\n  {\n    name: 'Brasília',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Brazzaville',\n    detail: 'Congo Republic',\n  },\n  {\n    name: 'Brisbane',\n    detail: 'Australia',\n  },\n  {\n    name: 'Bucharest',\n    detail: 'Romania',\n  },\n  {\n    name: 'Budapest',\n    detail: 'Hungary',\n  },\n  {\n    name: 'Buenos Aires',\n    detail: 'Argentina',\n  },\n  {\n    name: 'Bulawayo',\n    detail: 'Zimbabwe',\n  },\n  {\n    name: 'Busan',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Cairo',\n    detail: 'Egypt',\n  },\n  {\n    name: 'Calgary',\n    detail: 'Canada',\n  },\n  {\n    name: 'Cali',\n    detail: 'Colombia',\n  },\n  {\n    name: 'Caloocan',\n    detail: 'Philippines',\n  },\n  {\n    name: 'Campinas',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Cape Town',\n    detail: 'South Africa',\n  },\n  {\n    name: 'Caracas',\n    detail: 'Venezuela',\n  },\n  {\n    name: 'Casablanca',\n    detail: 'Morocco',\n  },\n  {\n    name: 'Changchun',\n    detail: 'China',\n  },\n  {\n    name: 'Changsha',\n    detail: 'China',\n  },\n  {\n    name: 'Chaozhou',\n    detail: 'China',\n  },\n  {\n    name: 'Chengdu',\n    detail: 'China',\n  },\n  {\n    name: 'Chennai',\n    detail: 'India',\n  },\n  {\n    name: 'Chicago',\n    detail: 'United States',\n  },\n  {\n    name: 'Chittagong',\n    detail: 'Bangladesh',\n  },\n  {\n    name: 'Chongqing',\n    detail: 'China',\n  },\n  {\n    name: 'Köln',\n    detail: 'Germany',\n  },\n  {\n    name: 'Curitiba',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Córdoba',\n    detail: 'Argentina',\n  },\n  {\n    name: 'Daegu',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Daejeon',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Dakar',\n    detail: 'Senegal',\n  },\n  {\n    name: 'Dalian',\n    detail: 'China',\n  },\n  {\n    name: 'Dallas',\n    detail: 'United States',\n  },\n  {\n    name: 'Dar es Salaam',\n    detail: 'Tanzania',\n  },\n  {\n    name: 'Davao City',\n    detail: 'Philippines',\n  },\n  {\n    name: 'Delhi',\n    detail: 'India',\n  },\n  {\n    name: 'Dhaka',\n    detail: 'Bangladesh',\n  },\n  {\n    name: 'Dongguan',\n    detail: 'China',\n  },\n  {\n    name: 'Douala',\n    detail: 'Cameroon',\n  },\n  {\n    name: 'Dubai',\n    detail: 'United Arab Emirates',\n  },\n  {\n    name: 'Durban',\n    detail: 'South Africa',\n  },\n  {\n    name: 'Ekurhuleni',\n    detail: 'South Africa',\n  },\n  {\n    name: 'Faisalabad',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Fez',\n    detail: 'Morocco',\n  },\n  {\n    name: 'Fortaleza',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Foshan',\n    detail: 'China',\n  },\n  {\n    name: 'Fukuoka',\n    detail: 'Japan',\n  },\n  {\n    name: 'Fuzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Giza',\n    detail: 'Egypt',\n  },\n  {\n    name: 'Guadalajara',\n    detail: 'Mexico',\n  },\n  {\n    name: 'Guangzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Guatemala City',\n    detail: 'Guatemala',\n  },\n  {\n    name: 'Guayaquil',\n    detail: 'Ecuador',\n  },\n  {\n    name: 'Gujranwala',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Hamburg',\n    detail: 'Germany',\n  },\n  {\n    name: 'Hangzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Hanoi',\n    detail: 'Vietnam',\n  },\n  {\n    name: 'Harare',\n    detail: 'Zimbabwe',\n  },\n  {\n    name: 'Harbin',\n    detail: 'China',\n  },\n  {\n    name: 'Havana',\n    detail: 'Cuba',\n  },\n  {\n    name: 'Hefei',\n    detail: 'China',\n  },\n  {\n    name: 'Hiroshima',\n    detail: 'Japan',\n  },\n  {\n    name: 'Ho Chi Minh City',\n    detail: 'Vietnam',\n  },\n  {\n    name: 'Hong Kong',\n    detail: 'China',\n  },\n  {\n    name: 'Houston',\n    detail: 'United States',\n  },\n  {\n    name: 'Hyderabad',\n    detail: 'India',\n  },\n  {\n    name: 'Hyderabad',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Ibadan',\n    detail: 'Nigeria',\n  },\n  {\n    name: 'Incheon',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Isfahan',\n    detail: 'Iran',\n  },\n  {\n    name: 'Islamabad',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Istanbul',\n    detail: 'Turkey',\n  },\n  {\n    name: 'İzmir',\n    detail: 'Turkey',\n  },\n  {\n    name: 'Jaipur',\n    detail: 'India',\n  },\n  {\n    name: 'Jakarta',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Jeddah',\n    detail: 'Saudi Arabia',\n  },\n  {\n    name: 'Jinan',\n    detail: 'China',\n  },\n  {\n    name: 'Johannesburg',\n    detail: 'South Africa',\n  },\n  {\n    name: 'Kabul',\n    detail: 'Afghanistan',\n  },\n  {\n    name: 'Kampala',\n    detail: 'Uganda',\n  },\n  {\n    name: 'Kano',\n    detail: 'Nigeria',\n  },\n  {\n    name: 'Kanpur',\n    detail: 'India',\n  },\n  {\n    name: 'Kaohsiung',\n    detail: 'Taiwan',\n  },\n  {\n    name: 'Karachi',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Karaj',\n    detail: 'Iran',\n  },\n  {\n    name: 'Kathmandu',\n    detail: 'Nepal',\n  },\n  {\n    name: 'Kawasaki',\n    detail: 'Japan',\n  },\n  {\n    name: 'Kharkiv',\n    detail: 'Ukraine',\n  },\n  {\n    name: 'Khartoum',\n    detail: 'Sudan',\n  },\n  {\n    name: 'Kiev',\n    detail: 'Ukraine',\n  },\n  {\n    name: 'Kinshasa',\n    detail: 'DR Congo',\n  },\n  {\n    name: 'Kobe',\n    detail: 'Japan',\n  },\n  {\n    name: 'Kolkata',\n    detail: 'India',\n  },\n  {\n    name: 'Kuala Lumpur',\n    detail: 'Malaysia',\n  },\n  {\n    name: 'Kwangju',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Kyoto',\n    detail: 'Japan',\n  },\n  {\n    name: 'Lagos',\n    detail: 'Nigeria',\n  },\n  {\n    name: 'Lahore',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Lanzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Lima',\n    detail: 'Peru',\n  },\n  {\n    name: 'London',\n    detail: 'United Kingdom',\n  },\n  {\n    name: 'Los Angeles',\n    detail: 'United States',\n  },\n  {\n    name: 'Luanda',\n    detail: 'Angola',\n  },\n  {\n    name: 'Lucknow',\n    detail: 'India',\n  },\n  {\n    name: 'Lusaka',\n    detail: 'Zambia',\n  },\n  {\n    name: 'Madrid',\n    detail: 'Spain',\n  },\n  {\n    name: 'Makassar',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Managua',\n    detail: 'Nicaragua',\n  },\n  {\n    name: 'Mandalay',\n    detail: 'Myanmar',\n  },\n  {\n    name: 'Manila',\n    detail: 'Philippines',\n  },\n  {\n    name: 'Maputo',\n    detail: 'Mozambique',\n  },\n  {\n    name: 'Maracaibo',\n    detail: 'Venezuela',\n  },\n  {\n    name: 'Mashhad',\n    detail: 'Iran',\n  },\n  {\n    name: 'Medan',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Medellin',\n    detail: 'Colombia',\n  },\n  {\n    name: 'Melbourne',\n    detail: 'Australia',\n  },\n  {\n    name: 'Mexico City',\n    detail: 'Mexico',\n  },\n  {\n    name: 'Milan',\n    detail: 'Italy',\n  },\n  {\n    name: 'Minsk',\n    detail: 'Belarus',\n  },\n  {\n    name: 'Monterrey',\n    detail: 'Mexico',\n  },\n  {\n    name: 'Montevideo',\n    detail: 'Uruguay',\n  },\n  {\n    name: 'Montreal',\n    detail: 'Canada',\n  },\n  {\n    name: 'Moscow',\n    detail: 'Russia',\n  },\n  {\n    name: 'Mumbai',\n    detail: 'India',\n  },\n  {\n    name: 'Munich',\n    detail: 'Germany',\n  },\n  {\n    name: 'Nagoya',\n    detail: 'Japan',\n  },\n  {\n    name: 'Nagpur',\n    detail: 'India',\n  },\n  {\n    name: 'Nairobi',\n    detail: 'Kenya',\n  },\n  {\n    name: 'Nanjing',\n    detail: 'China',\n  },\n  {\n    name: 'Taipei City',\n    detail: 'Taiwan',\n  },\n  {\n    name: 'New York City',\n    detail: 'United States',\n  },\n  {\n    name: 'Ningbo',\n    detail: 'China',\n  },\n  {\n    name: 'Nizhny Novgorod',\n    detail: 'Russia',\n  },\n  {\n    name: 'Novosibirsk',\n    detail: 'Russia',\n  },\n  {\n    name: 'Omsk',\n    detail: 'Russia',\n  },\n  {\n    name: 'Oran',\n    detail: 'Algeria',\n  },\n  {\n    name: 'Osaka',\n    detail: 'Japan',\n  },\n  {\n    name: 'Ouagadougou',\n    detail: 'Burkina Faso',\n  },\n  {\n    name: 'Palembang',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Paris',\n    detail: 'France',\n  },\n  {\n    name: 'Patna',\n    detail: 'India',\n  },\n  {\n    name: 'Peshawar',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Philadelphia',\n    detail: 'United States',\n  },\n  {\n    name: 'Phnom Penh',\n    detail: 'Cambodia',\n  },\n  {\n    name: 'Phoenix',\n    detail: 'United States',\n  },\n  {\n    name: 'Porto Alegre',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Prague',\n    detail: 'Czech Republic',\n  },\n  {\n    name: 'Pune',\n    detail: 'India',\n  },\n  {\n    name: 'Pyongyang',\n    detail: 'North Korea',\n  },\n  {\n    name: 'Qingdao',\n    detail: 'China',\n  },\n  {\n    name: 'Qom',\n    detail: 'Iran',\n  },\n  {\n    name: 'Quanzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Quezon City',\n    detail: 'Philippines',\n  },\n  {\n    name: 'Quito',\n    detail: 'Ecuador',\n  },\n  {\n    name: 'Rawalpindi',\n    detail: 'Pakistan',\n  },\n  {\n    name: 'Recife',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Rio de Janeiro',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Riyadh',\n    detail: 'Saudi Arabia',\n  },\n  {\n    name: 'Rome',\n    detail: 'Italy',\n  },\n  {\n    name: 'Rosario',\n    detail: 'Argentina',\n  },\n  {\n    name: 'Rostov-on-Don',\n    detail: 'Russia',\n  },\n  {\n    name: 'Saint Petersburg',\n    detail: 'Russia',\n  },\n  {\n    name: 'Saitama',\n    detail: 'Japan',\n  },\n  {\n    name: 'Salvador',\n    detail: 'Brazil',\n  },\n  {\n    name: 'San Antonio',\n    detail: 'United States',\n  },\n  {\n    name: 'San Diego',\n    detail: 'United States',\n  },\n  {\n    name: \"Sana'a\",\n    detail: 'Yemen',\n  },\n  {\n    name: 'Santa Cruz de la Sierra',\n    detail: 'Bolivia',\n  },\n  {\n    name: 'Santiago',\n    detail: 'Chile',\n  },\n  {\n    name: 'Sapporo',\n    detail: 'Japan',\n  },\n  {\n    name: 'Semarang',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Seoul',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Shanghai',\n    detail: 'China',\n  },\n  {\n    name: 'Shantou',\n    detail: 'China',\n  },\n  {\n    name: 'Shenyang',\n    detail: 'China',\n  },\n  {\n    name: 'Shenzhen',\n    detail: 'China',\n  },\n  {\n    name: 'Shijiazhuang',\n    detail: 'China',\n  },\n  {\n    name: 'Shiraz',\n    detail: 'Iran',\n  },\n  {\n    name: 'Singapore',\n    detail: 'Singapore',\n  },\n  {\n    name: 'Sofia',\n    detail: 'Bulgaria',\n  },\n  {\n    name: 'Surabaya',\n    detail: 'Indonesia',\n  },\n  {\n    name: 'Surat',\n    detail: 'India',\n  },\n  {\n    name: 'Suwon',\n    detail: 'South Korea',\n  },\n  {\n    name: 'Suzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Sydney',\n    detail: 'Australia',\n  },\n  {\n    name: 'São Paulo',\n    detail: 'Brazil',\n  },\n  {\n    name: 'Tbilisi',\n    detail: 'Georgia',\n  },\n  {\n    name: 'Tabriz',\n    detail: 'Iran',\n  },\n  {\n    name: 'Taichung',\n    detail: 'Taiwan',\n  },\n  {\n    name: 'Tainan',\n    detail: 'Taiwan',\n  },\n  {\n    name: 'Taipei',\n    detail: 'Taiwan',\n  },\n  {\n    name: 'Tangshan',\n    detail: 'China',\n  },\n  {\n    name: 'Tashkent',\n    detail: 'Uzbekistan',\n  },\n  {\n    name: 'Tehran',\n    detail: 'Iran',\n  },\n  {\n    name: 'Tianjin',\n    detail: 'China',\n  },\n  {\n    name: 'Tijuana',\n    detail: 'Mexico',\n  },\n  {\n    name: 'Tokyo',\n    detail: 'Japan',\n  },\n  {\n    name: 'Toronto',\n    detail: 'Canada',\n  },\n  {\n    name: 'Tripoli',\n    detail: 'Libya',\n  },\n  {\n    name: 'Tunis',\n    detail: 'Tunisia',\n  },\n  {\n    name: 'Ulsan',\n    detail: 'South',\n  },\n  {\n    name: 'Vienna',\n    detail: 'Austria',\n  },\n  {\n    name: 'Vijayawada',\n    detail: 'India',\n  },\n  {\n    name: 'Visakhapatnam',\n    detail: 'India',\n  },\n  {\n    name: 'Warsaw',\n    detail: 'Poland',\n  },\n  {\n    name: 'Wenzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Wuhan',\n    detail: 'China',\n  },\n  {\n    name: \"Xi'an\",\n    detail: 'China',\n  },\n  {\n    name: 'Xiamen',\n    detail: 'China',\n  },\n  {\n    name: 'Yangon',\n    detail: 'Myanmar',\n  },\n  {\n    name: 'Yaoundé',\n    detail: 'Cameroon',\n  },\n  {\n    name: 'Yekaterinburg',\n    detail: 'Russia',\n  },\n  {\n    name: 'Yerevan',\n    detail: 'Armenia',\n  },\n  {\n    name: 'Yokohama',\n    detail: 'Japan',\n  },\n  {\n    name: 'Zhengzhou',\n    detail: 'China',\n  },\n  {\n    name: 'Zhongshan',\n    detail: 'China',\n  },\n  {\n    name: 'Zunyi',\n    detail: 'China',\n  },\n  { name: 'Vancouver', detail: 'Canada' },\n]\n\nexport const getRandomCity = () => {\n  let i = Math.floor(Math.random() * cityList.length)\n  return { city: cityList[i].name, country: cityList[i].detail }\n}\n","import React from \"react\";\nimport { getRandomCity } from \"../../utils/randomCity\";\n\nexport class Randomizer extends React.Component {\n  getRandomCity = () => {\n    this.props.onChange(getRandomCity());\n  };\n\n  render() {\n    return (\n      <div>\n        <button onClick={this.getRandomCity}>Go Somewhere Else</button>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport class Button extends React.Component {\n  onClick = (e) => {\n    this.props.onClick(this.props.type);\n  };\n\n  render() {\n    if (this.props.view === this.props.type) {\n      return (\n        <div className=\"selected\">\n          <button onClick={this.onClick}>{this.props.type}</button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <button onClick={this.onClick}>{this.props.type}</button>\n        </div>\n      );\n    }\n  }\n}\n","import React from \"react\";\nimport { Button } from \"./button\";\nimport \"./nav.css\";\n\nexport class Nav extends React.Component {\n  render() {\n    return (\n      <div className=\"nav\">\n        <Button\n          onClick={this.props.onViewChange}\n          view={this.props.view}\n          type=\"Today\"\n        />\n        <Button\n          onClick={this.props.onViewChange}\n          view={this.props.view}\n          type=\"Tomorrow\"\n        />\n        <Button\n          onClick={this.props.onViewChange}\n          view={this.props.view}\n          type=\"Five Day Forecast\"\n        />\n      </div>\n    );\n  }\n}\n","import React from 'react'\nimport './title.css'\nimport { Randomizer } from './randomizer'\nimport { Nav } from './nav'\n\nexport class Title extends React.Component {\n  render () {\n    const thisTitle = () => {\n      if (this.props.view === 'Today' || this.props.view === 'Tomorrow') {\n        return (\n          <>\n            What's the weather like <br />{' '}\n            <span className='view'>{this.props.view.toLowerCase()}</span> in{' '}\n          </>\n        )\n      } else {\n        return (\n          <>\n            What's the five day <br />\n            forecast in{' '}\n          </>\n        )\n      }\n    }\n    return (\n      <>\n        <div className='title'>\n          {thisTitle()}\n          <span className='city'>\n            {this.props.city}, {this.props.country}?\n            <br />\n          </span>\n        </div>\n        <div className='navbar'>\n          <Randomizer onChange={this.props.onRandom} />\n          <Nav view={this.props.view} onViewChange={this.props.onViewChange} />\n        </div>\n      </>\n    )\n  }\n}\n","let days = [\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n  'Sunday',\n  'Monday',\n  'Tuesday',\n  'Wednesday',\n  'Thursday',\n  'Friday',\n  'Saturday',\n]\n\nexport const localize = (rawWeather, view) => {\n  let i\n  const localTimeRaw = new Date(\n    Date.now() + rawWeather.city.timezone * 1000,\n  ).toUTCString()\n\n  const localTime = localTimeRaw.substr(17, 5)\n\n  const localDate = localTimeRaw.substr(5, 11)\n\n  switch (localTimeRaw.substr(0, 3)) {\n    case 'Sun':\n      i = 0\n      break\n    case 'Mon':\n      i = 1\n      break\n    case 'Tue':\n      i = 2\n      break\n    case 'Wed':\n      i = 3\n      break\n    case 'Thu':\n      i = 4\n      break\n    case 'Fri':\n      i = 5\n      break\n    case 'Sat':\n      i = 6\n      break\n    default:\n      break\n  }\n\n  const localDay = days[i]\n  if (view !== 'Five Day Forecast') {\n    return localTime + ' on ' + localDay + ', ' + localDate + '.'\n  } else {\n    return fiveDayOfTheWeek(i)\n  }\n}\n\nexport const dayOfTheWeek = day => {\n  return days[day.timestamp.getDay()]\n}\n\nconst fiveDayOfTheWeek = x => {\n  return [days[x], days[x + 1], days[x + 2], days[x + 3], days[x + 4]]\n}\n\nexport const around = day => {\n  let time = day.timestamp.getHours()\n  if (time < 10) {\n    return '0' + time + ':00)'\n  } else {\n    return time + ':00)'\n  }\n}\n\nexport const localDate = rawWeather => {\n  let dates = []\n  let dayInSeconds = 86400\n\n  for (let i = 0; i <= dayInSeconds * 4; i += dayInSeconds) {\n    let nextDate = new Date(Date.now() + (rawWeather.city.timezone + i) * 1000)\n    let dateString = nextDate.toUTCString()\n    let substrDate = dateString.substr(5, 11)\n    dates.push(substrDate)\n  }\n\n  return dates\n}\n","/* eslint-disable import/prefer-default-export */\nexport const describe = weather => {\n  const thisWeather = weather\n  let descriptor\n  switch (thisWeather) {\n    case 'Thunderstorm':\n      descriptor = [\n        'Stay indoors.',\n        'Do you know how to measure the distance of a thunderstorm?',\n        \"Don't get struck by lightning.\",\n      ]\n      break\n    case 'Drizzle':\n      descriptor = [\n        \"You probably wouldn't need an umbrella.\",\n        \"It's a bit of a light rain.\",\n        \"It's trying to rain.\",\n      ]\n      break\n    case 'Rain':\n      descriptor = [\n        'Do you have an umbrella?',\n        'I wish I had a bright yellow raincoat.',\n        'The flowers like the rain.',\n      ]\n      break\n    case 'Snow':\n      descriptor = [\n        'Do you want to build a snowman?',\n        'Let it snow, let it snow, let it snow...',\n        'Climate change is real.',\n      ]\n      break\n    case 'Clouds':\n      descriptor = [\n        'I saw a cloud shaped like a cat once.',\n        'Clouds can be nice, too.',\n        \"At least it's not raining.\",\n      ]\n      break\n    case 'Clear':\n      descriptor = [\n        \"Clear skies. Full hearts. Can't lose.\",\n        'You can see for miles.',\n        'Not a cloud in the sky.',\n      ]\n      break\n    case 'Mist':\n      descriptor = [\n        'Visibility will be low.',\n        \"Don't venture too far into the mist.\",\n        'Like a scene from an old detective movie.',\n      ]\n      break\n    case 'Smoke':\n      descriptor = [\n        'It might be best to stay indoors.',\n        'Do you have a mask to wear?',\n        'Is it caused by a fire? I hope everyone is ok.',\n      ]\n      break\n    case 'Haze':\n      descriptor = [\n        'Visibility might be low.',\n        'This city is in a haze, just like my teenage years.',\n        \"At least it's now snowing.\",\n      ]\n      break\n    case 'Dust':\n      descriptor = [\n        'Do you have a dust mask?',\n        'It might be hard to breathe outside.',\n        \"I bet that'll require a lot of clean-up.\",\n      ]\n      break\n    case 'Fog':\n      descriptor = [\n        'Drive carefully; visibility will be low.',\n        'Sounds spooky.',\n        \"Foggy weather is a lighthouse's time to shine.\",\n      ]\n      break\n    case 'Sand':\n      descriptor = [\n        'A sandstorm? Doo doo doo doo doo.',\n        'Do you have a mask to wear?',\n        \"I hate sand. It's coarse and rough and irritating and it gets everywhere.\",\n      ]\n      break\n    case 'Ash':\n      descriptor = [\n        \"That doesn't sound safe.\",\n        \"It's Pompeii all over again.\",\n        'Did a volcano blow up?',\n      ]\n      break\n    case 'Squall':\n      descriptor = [\n        'That sounds very windy.',\n        'Maybe you should stay indoors?',\n        'An umbrella would just blow away in the wind.',\n      ]\n      break\n    case 'Tornado':\n      descriptor = [\n        \"I hope you're staying safe.\",\n        'That sounds scary. Be careful.',\n        \"Don't get swept away.\",\n      ]\n      break\n    default:\n      descriptor = ''\n  }\n  return descriptor[Math.floor(Math.random() * descriptor.length)]\n}\n","import React from 'react'\n\nimport './view.css'\nimport {\n  localize,\n  dayOfTheWeek,\n  around,\n  localDate,\n} from '../../utils/dayDisplay'\nimport { describe } from '../../utils/weatherDescription'\n\nexport class View extends React.Component {\n  render () {\n    if (!this.props.weather || !this.props.rawWeather) return <p></p>\n\n    if (this.props.view === 'Today' || this.props.view === 'Tomorrow') {\n      const data = this.props.weather.map(day => {\n        return (\n          <div className='forecast'>\n            <p className='dayOfTheWeek'>\n              {dayOfTheWeek(day)}\n              <br />\n              <span className='timeOfDay'>\n                {day.description} <br />\n                <span id='around'>(around {around(day)}</span>\n              </span>\n            </p>\n            <p className='degrees'>{day.weather.toFixed(1)}°C</p>\n            <span className='weatherType'>{day.type}</span>\n            <p className='weatherDescription'>{describe(day.type)}</p>\n            {/* <p className=\"flavourText\">\n              {flavourText.get(weather[0].main.temp)}\n            </p> */}\n          </div>\n        )\n      })\n      return (\n        <>\n          <p className='localTime'>\n            The local time here is {localize(this.props.rawWeather)}\n          </p>\n          <div className='weatherBox'>{data}</div>\n        </>\n      )\n    } else {\n      const fiveDayForecast = [0, 1, 2, 3, 4].map(\n        i => this.props.rawWeather.list[i * 8],\n      )\n      const data = fiveDayForecast.map((fiveDay, i) => {\n        return (\n          <div className='forecast'>\n            <p className='dayOfTheWeek'>\n              {localize(this.props.rawWeather, this.props.view)[i]}\n              <br />\n              <span className='timeOfDay'>\n                {localDate(this.props.rawWeather)[i]}\n              </span>\n            </p>\n            <p className='degrees'>{fiveDay.main.temp.toFixed(1)}°C</p>\n            <span className='weatherType'>{fiveDay.weather[0].main}</span>\n            <p className='weatherDescription'>\n              {describe(fiveDay.weather[0].main)}\n            </p>\n            {/* <p className=\"flavourText\">{this.props.flavourText}</p> */}\n          </div>\n        )\n      })\n      return (\n        <>\n          <p className='localTime'>\n            The local time here is {localize(this.props.rawWeather)}\n          </p>\n          <div className='weatherBox'>{data}</div>\n        </>\n      )\n    }\n  }\n}\n","const apiKey = 'ec362ff2f036929f0acb8d6cc8ca8f19';\nconst units = \"metric\";\n\n// sample API call\n// https://api.openweathermap.org/data/2.5/forecast?q=Vancouver,Canada&appid=ec362ff2f036929f0acb8d6cc8ca8f19&units=metric\n\nexport const getWeather = (city, country) => {\n  const apiCall = `https://api.openweathermap.org/data/2.5/forecast?q=${city},${country}&appid=${apiKey}&units=${units}`;\n  return fetch(apiCall)\n    .then((response) => response.json())\n    .then((weather) => weather);\n};\n","var _ = require('lodash') // used to deep clone\n// takes in a forecast object and timezone with the purpose of converting the timestamps within the forecast to local time based on region\nexport const convertTimeZone = (forecast, view) => {\n  // deep clones this.state.forecast so it doesn't change it in .state\n  let cloneForecast = _.cloneDeep(forecast)\n  // for each day of the forecast, create an array of the timestamps for each weather forecast\n  const UTCTimes = cloneForecast.list.map(x => x.dt_txt)\n  // convert the timestamp to region's local time by adding the difference in timezone in seconds\n  const localTimes = UTCTimes.map(x => {\n    let timestamp = new Date(x)\n    timestamp.setSeconds(timestamp.getSeconds() + cloneForecast.city.timezone)\n    return timestamp\n  })\n  // returns a copy of the forecast where all the times are converted to the region's local time\n  let newForecast = _.cloneDeep(forecast)\n  for (let i = 0; i < localTimes.length; i++) {\n    newForecast.list[i].dt_txt = localTimes[i]\n  }\n  // calls the function to reduce the long (40~) array of every forecast to just the ones we need based on the view. only the list of forecasts from the forecast object, not the entire object\n  return reduceToThisDay(newForecast.list, view)\n}\n\n// takes in the object where each forecast has a localized timestamp and the current view (either today or tomorrow), with the purpose of reducing the array to just the forecasts we need for this view\nconst reduceToThisDay = (newForecast, view) => {\n  if (view === 'Today') {\n    // only pushes the first 24 hours worth of forecasts (in case the forecast is on a 6hr basis instead of 3hrs as usual)\n    // the data will always have the same set of hours (eg 12, 3, 6, etc) so checking if the hour is the same will make it stop at the next day\n    let i = 1\n    const weatherAndTime = [\n      // populates the array with the first index so we can skip over it and go straight to the comparison\n      {\n        weather: newForecast[0].main.temp,\n        timestamp: newForecast[0].dt_txt,\n        type: newForecast[0].weather[0].main,\n      },\n    ]\n    while (\n      newForecast[0].dt_txt.getHours() !== newForecast[i].dt_txt.getHours()\n    ) {\n      // pushes only the temperature in degrees and the timestamp as an object to a new array\n      weatherAndTime.push({\n        weather: newForecast[i].main.temp,\n        timestamp: newForecast[i].dt_txt,\n        type: newForecast[i].weather[0].main,\n      })\n      i++\n    }\n    // returns an array of objects with the weather and associated local timestamp, but just the ones we need, and passes it to the last function which will give each forecast a time of day description\n    return describeTimeOfDay(weatherAndTime)\n  }\n\n  if (view === 'Tomorrow') {\n    let i = 1 // counter to find first day of 'tomorrow'\n    let x = 2 // second counter to find additional days past 'tomorrow'\n    let today = newForecast[0].dt_txt.getHours() // set the definition of 'today' to index[0]'s time\n    while (newForecast[i].dt_txt.getHours() !== today) {\n      // looks for the next time the hours = today's hours because that'll be tomorrow\n      i++\n      x++ // increases both counters\n    }\n    const weatherAndTime = [\n      // once it finds 'tomorrow'\n      {\n        weather: newForecast[i].main.temp, // set these values to tomorrow's values\n        timestamp: newForecast[i].dt_txt,\n        type: newForecast[i].weather[0].main,\n      },\n    ]\n\n    while (today !== newForecast[x].dt_txt.getHours()) {\n      // repeats the logic of the today fn - pushes everything from each timestamp of 'tomorrow' until it hits the next day\n      weatherAndTime.push({\n        weather: newForecast[x].main.temp,\n        timestamp: newForecast[x].dt_txt,\n        type: newForecast[x].weather[0].main,\n      })\n      x++\n    } // passes the object to a fn that describes each timestamp & reduces to unique values\n    return describeTimeOfDay(weatherAndTime)\n  }\n}\n\n// describes each timestamp by time of day and returns an array containing each forecast's timestamp, weather, and time description (unique only)\nconst describeTimeOfDay = weatherAndTime => {\n  let finalForecast = [] // creates a new array\n  for (let i = 0; i < weatherAndTime.length; i++) {\n    let time = weatherAndTime[i].timestamp.getHours()\n    if (time > 0 && time <= 5) {\n      if (\n        // if finalForecast does not exist, or if it does exists and doesn't already contain a forecast with this description\n        // why: we only want to have the first early morning forecast, first morning, first noon, etc.\n        !finalForecast ||\n        finalForecast.every(d => d.description !== 'Early Morning')\n      ) {\n        finalForecast.push(weatherAndTime[i])\n        finalForecast[finalForecast.length - 1].description = 'Early Morning'\n      }\n    } else if (time > 5 && time <= 10) {\n      if (\n        !finalForecast ||\n        finalForecast.every(d => d.description !== 'Morning')\n      ) {\n        finalForecast.push(weatherAndTime[i])\n        finalForecast[finalForecast.length - 1].description = 'Morning'\n      }\n    } else if (time > 10 && time <= 14) {\n      if (!finalForecast || finalForecast.every(d => d.description !== 'Noon')) {\n        finalForecast.push(weatherAndTime[i])\n        finalForecast[finalForecast.length - 1].description = 'Noon'\n      }\n    } else if (time > 14 && time <= 19) {\n      if (\n        !finalForecast ||\n        finalForecast.every(d => d.description !== 'Afternoon')\n      ) {\n        finalForecast.push(weatherAndTime[i])\n        finalForecast[finalForecast.length - 1].description = 'Afternoon'\n      }\n    } else if (time > 19 || time === 0) {\n      if (\n        !finalForecast ||\n        finalForecast.every(d => d.description !== 'Evening')\n      ) {\n        finalForecast.push(weatherAndTime[i])\n        finalForecast[finalForecast.length - 1].description = 'Evening'\n      }\n    }\n  }\n  // returns an array containing five objects, one for each time of day, each with the forecast itself and the localized timestamp\n  return finalForecast\n}\n\n/* expected output\n\nArray = [\n{\ndescription:\nMorning\ntimestamp: date\nweather:\n28.78\n}\n{\ndescription:\nNoon\ntimestamp: date\nweather:\n28.82\n}\n{\ndescription:\nAfternoon\ntimestamp: date\nweather:\n28.6\n}\n{\ndescription:\nEvening\ntimestamp: date\nweather:\n28.46\n}\n{\ndescription:\nEarly Morning\ntimestamp: date\nweather:\n28.05\n}\n]\n\n*/\n","import React from 'react'\nimport { Title } from './title'\nimport { View } from './view'\nimport { getWeather } from '../../utils/api'\nimport { convertTimeZone } from '../../utils/date'\nimport './main.css'\n\nexport class Main extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      view: 'Today',\n      city: 'Vancouver',\n      country: 'Canada',\n    }\n  }\n\n  componentDidMount () {\n    this.setWeather()\n  }\n\n  setWeather = (\n    view = 'Today', // default view is Today\n    city = { city: 'Vancouver', country: 'Canada' }, // default city & country is Vancouver Canada\n  ) => {\n    let weather // declare 'weather' which will hold the api call result (raw forecast)\n    if (view !== this.state.view && view !== 'Five Day Forecast') {\n      // checks if you're just switching views AND that it's not five day forecast\n      let localizedWeather = convertTimeZone(this.state.rawForecast, view) // converts the raw forecast to today or tomorrow timezone\n      this.setState({\n        // only changes the view and localized weather\n        view: view,\n        weather: localizedWeather,\n      })\n    } else if (\n      // checks if you hit the random button and are changing cities & countries\n      city.city !== this.state.city ||\n      city.country !== this.state.country\n    ) {\n      getWeather(city.city, city.country).then(result => {\n        // calls the api for a forecast\n        weather = result // sets the raw forecast to weather\n        let localizedWeather = convertTimeZone(weather, 'Today') // localizes it using the raw forecast we just got\n        this.setState({\n          // sets the rawforecast with the new api result, the new city and country, and the localized weather\n          rawForecast: weather,\n          city: city.city,\n          country: city.country,\n          weather: localizedWeather,\n        })\n      })\n    } else if (view === 'Five Day Forecast') {\n      // if it is a 5 day forecast, we only change the view (view.js does the logic for a 5 day forecast using rawforecast)\n      this.setState({\n        view: view,\n      })\n    } else {\n      // if none of the above are true (ie initial mount)\n      getWeather(city.city, city.country).then(result => {\n        // calls the api\n        weather = result // sets api result to weather variable\n        let localizedWeather = convertTimeZone(weather, 'Today') // localizes the result for the today view\n        this.setState({\n          // sets all the initial states including the view to Today\n\n          rawForecast: weather,\n          city: city.city,\n          country: city.country,\n          weather: localizedWeather,\n        })\n      })\n    }\n  }\n\n  onViewChange = view => {\n    let city = { city: this.state.city, country: this.state.country }\n    this.setWeather(view, city)\n  }\n\n  onRandomCity = city => {\n    this.setWeather(this.state.view, city)\n  }\n\n  render () {\n    return (\n      <div className='container'>\n        <Title\n          city={this.state.city}\n          country={this.state.country}\n          view={this.state.view}\n          onRandom={this.onRandomCity}\n          onViewChange={this.onViewChange}\n        />\n        <View\n          view={this.state.view}\n          weather={this.state.weather}\n          rawWeather={this.state.rawForecast}\n        />\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport { Main } from \"../display/main\";\n\n\nfunction App() {\n  return <Main />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/app/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}